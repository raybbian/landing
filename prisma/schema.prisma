// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Queue {
  id     String      @id @default(cuid())
  name   String
  items  QueueItem[]
  canAdd Boolean

  dateCreated DateTime @default(now())

  userId String @map("user_id")
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QueueItem {
  id          String    @id @default(cuid())
  name        String
  description String?
  deadline    DateTime?
  link        String?
  color       Int

  dateCreated DateTime @default(now())
  status      Int      @default(0) // 0 - not started, 1 - in progress, 2 - done

  queueId String @map("queue_id")
  userId  String @map("user_id")
  Queue   Queue  @relation(fields: [queueId], references: [id], onDelete: Cascade)
  User    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  queues        Queue[]
  queueItems    QueueItem[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
